image(#
    			x = seq(#
    					from = min(coordinates[, 1] - delta.coord/2), #
    					to = max(coordinates[,1] + delta.coord/2), #
    					length = nxdom#
    					), #
    			y = seq(#
    					from = min(coordinates[,2] - delta.coord/2), #
    					to = max(coordinates[, 2] + delta.coord/2), #
                    length = nydom#
                    ), #
			z = matrix(#
					data = map.dom, #
					nrow = nxdom, #
					ncol = nydom,#
					byrow = TRUE#
					), #
			xlab = "", #
			ylab = "", #
			main = "", #
			cex = 1.5, #
			cex.lab = 1.5, #
			col = gg_color_hue(max(map.dom)),#terrain.colors(npopmax), #
			xlim = c(min(coordinates[,1] - delta.coord/2 - frame), max(coordinates[,1] + delta.coord/2 + frame)), #
			ylim = c(min(coordinates[,2] - delta.coord/2 - frame), max(coordinates[,2] + delta.coord/2 + frame)), #
			asp = 1#
		)#
#
    points(#
    			x = coordinates, #
    			pch = 8, #16#
    			cex = 1#
    			)#
#
    title(sub = "Estimated cluster membership")#
#
    title(main = main.title, pch = 16)
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
map.axes()
library(Geneland)#
library(mapdata)
coordinates_obj <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/input/coordinates.txt")
coordinates <- coordinates_obj
mcmc_dir <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/geneland_out/1/"
mcmc_dir <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/geneland_out/"
mcmc_dir <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/geneland_out/1/"
gg_color_hue <- function(n) {#
  hues = seq(15, 375, length=n+1)#
  hcl(h=hues, l=65, c=100)[1:n]#
}
plot_geneland <- function (coordinates, path.mcmc, plotit = TRUE, format = "pdf", #
          new.dev = TRUE, printit = FALSE, file, main.title = ""){#
  coordinates <- as.matrix(coordinates)#
  fileparam <- paste(path.mcmc, "parameters.txt", sep = "")#
  # change:  fileparam <- file.path(path.mcmc, "parameters.txt")#
#
  param <- as.matrix(read.table(fileparam))#
  # change: param <- read.table(fileparam, sep = ":")#
  delta.coord <- as.numeric(param[param[, 1] == "delta.coord", 3])#
  # change: delta.coord <- as.numeric(param[param[, 1] == "delta.coord", 2])#
  npopmax <- as.numeric(param[param[, 1] == "npopmax", 3])#
  # change: npopmax <- as.numeric(param[param[, 1] == "npopmax", 2])#
  param.postprocess <- as.matrix(read.table(paste(path.mcmc, "postprocess.parameters.txt", sep = "")))#
  # change: param.postprocess <- read.table(file.path(path.mcmc, "postprocess.parameters.txt"), sep = ":")#
  nxdom <- as.numeric(param.postprocess[1, 3])#
  # change: nxdom <- as.numeric(param.postprocess[param.postprocess[, 1] == "nxdom", 3])#
  nydom <- as.numeric(param.postprocess[2, 3])#
  # change: nydom <- as.numeric(param.postprocess[param.postprocess[, 1] == "nydom", 3])#
  print(nxdom)#
  # print(paste("Number of horizontal pixels:", nxdom))#
  print(nydom)#
  # print(paste("Number of vertical pixels:", nydom))#
  s <- coordinates#
  filedom <- paste(path.mcmc, "proba.pop.membership.txt", sep = "")#
  # filedom <- file.path(path.mcmc, "proba.pop.membership.txt")#
  data <- as.matrix(read.table(filedom))#
  # change: data to prob_pop_mem#
  dom.post <- data[, -(1:2)]#
  coord.grid <- data[, (1:2)]#
  s[, 1] <- s[, 1] - min(s[, 1])#
  s[, 2] <- s[, 2] - min(s[, 2])#
  map.dom <- t(apply(dom.post, 1, order))[, npopmax]#
  frame <- max(#
    			max(coordinates[, 1]) - min(coordinates[, 1]), #
    			max(coordinates[, 2]) - min(coordinates[, 2])#
    			)/40#
#
  image(#
    		x = seq(#
    				from = min(coordinates[, 1] - delta.coord/2), #
    				to   = max(coordinates[, 1] + delta.coord/2), #
    				length = nxdom#
    				), #
    		y = seq(#
    				from = min(coordinates[, 2] - delta.coord/2), #
    				to   = max(coordinates[, 2] + delta.coord/2), #
                    length = nydom#
                    ), #
			z = matrix(#
					data = map.dom, #
					nrow = nxdom, #
					ncol = nydom,#
					byrow = TRUE#
					), #
			xlab = "", #
			ylab = "", #
			main = "", #
			cex = 1.5, #
			cex.lab = 1.5, #
			col = gg_color_hue(max(map.dom)),#terrain.colors(npopmax), #
			xlim = c(min(coordinates[,1] - delta.coord/2 - frame), max(coordinates[,1] + delta.coord/2 + frame)), #
			ylim = c(min(coordinates[,2] - delta.coord/2 - frame), max(coordinates[,2] + delta.coord/2 + frame)), #
			asp = 1#
		)#
#
    points(#
    			x = coordinates, #
    			pch = 8, #16#
    			cex = 1#
    			)#
#
    # title(sub = "Estimated cluster membership")#
#
    title(main = main.title, pch = 16)#
#
  }
plot_geneland(coordinates = coordinates, path.mcmc = path.mcmc)
plot_geneland <- function (coordinates, path.mcmc, main.title = ""){#
  coordinates <- as.matrix(coordinates)#
  fileparam <- paste(path.mcmc, "parameters.txt", sep = "")#
  # change:  fileparam <- file.path(path.mcmc, "parameters.txt")#
#
  param <- as.matrix(read.table(fileparam))#
  # change: param <- read.table(fileparam, sep = ":")#
  delta.coord <- as.numeric(param[param[, 1] == "delta.coord", 3])#
  # change: delta.coord <- as.numeric(param[param[, 1] == "delta.coord", 2])#
  npopmax <- as.numeric(param[param[, 1] == "npopmax", 3])#
  # change: npopmax <- as.numeric(param[param[, 1] == "npopmax", 2])#
  param.postprocess <- as.matrix(read.table(paste(path.mcmc, "postprocess.parameters.txt", sep = "")))#
  # change: param.postprocess <- read.table(file.path(path.mcmc, "postprocess.parameters.txt"), sep = ":")#
  nxdom <- as.numeric(param.postprocess[1, 3])#
  # change: nxdom <- as.numeric(param.postprocess[param.postprocess[, 1] == "nxdom", 3])#
  nydom <- as.numeric(param.postprocess[2, 3])#
  # change: nydom <- as.numeric(param.postprocess[param.postprocess[, 1] == "nydom", 3])#
  print(nxdom)#
  # print(paste("Number of horizontal pixels:", nxdom))#
  print(nydom)#
  # print(paste("Number of vertical pixels:", nydom))#
  s <- coordinates#
  filedom <- paste(path.mcmc, "proba.pop.membership.txt", sep = "")#
  # filedom <- file.path(path.mcmc, "proba.pop.membership.txt")#
  data <- as.matrix(read.table(filedom))#
  # change: data to prob_pop_mem#
  dom.post <- data[, -(1:2)]#
  coord.grid <- data[, (1:2)]#
  s[, 1] <- s[, 1] - min(s[, 1])#
  s[, 2] <- s[, 2] - min(s[, 2])#
  map.dom <- t(apply(dom.post, 1, order))[, npopmax]#
  frame <- max(#
    			max(coordinates[, 1]) - min(coordinates[, 1]), #
    			max(coordinates[, 2]) - min(coordinates[, 2])#
    			)/40#
#
  image(#
    		x = seq(#
    				from = min(coordinates[, 1] - delta.coord/2), #
    				to   = max(coordinates[, 1] + delta.coord/2), #
    				length = nxdom#
    				), #
    		y = seq(#
    				from = min(coordinates[, 2] - delta.coord/2), #
    				to   = max(coordinates[, 2] + delta.coord/2), #
                    length = nydom#
                    ), #
			z = matrix(#
					data = map.dom, #
					nrow = nxdom, #
					ncol = nydom,#
					byrow = TRUE#
					), #
			xlab = "", #
			ylab = "", #
			main = "", #
			cex = 1.5, #
			cex.lab = 1.5, #
			col = gg_color_hue(max(map.dom)),#terrain.colors(npopmax), #
			xlim = c(min(coordinates[,1] - delta.coord/2 - frame), max(coordinates[,1] + delta.coord/2 + frame)), #
			ylim = c(min(coordinates[,2] - delta.coord/2 - frame), max(coordinates[,2] + delta.coord/2 + frame)), #
			asp = 1#
		)#
#
    points(#
    			x = coordinates, #
    			pch = 8, #16#
    			cex = 1#
    			)#
#
    # title(sub = "Estimated cluster membership")#
#
    title(main = main.title, pch = 16)#
#
  }
mcmc_dir
plot_geneland(coordinates = coordinates_obj)
plot_geneland(coordinates = coordinates_obj, path.mcmc = mcmc_dir)
par(mfcol=c(1,2))#
plot_geneland(#
	coordinates = coordinates_obj, #
	path.mcmc = mcmc_dir#
)
plot_geneland(#
	coordinates = coordinates_obj, #
	path.mcmc = mcmc_dir#
)
coordinates_obj
min(coordinates_obj[,1])
min(coordinates_obj[,2])
max(coordinates_obj[,1])
max(coordinates_obj[,2])
plot_geneland(#
	coordinates = coordinates_obj, #
	path.mcmc = mcmc_dir#
)
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
map.axes()
layout_matrix <- matrix(data = c(1,2), nrow = 1)#
layout(mat = layout_matrix)#
layout.show()
layout_matrix
layout(mat = layout_matrix)
layout.show()
coordinates_AMAK <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/input/coordinates.txt")
coordinates_DATR <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/input/coordinates.txt")
coordinates_AMAK <- read.table("/Users/jimmy.odonnell/Downloads/geneland_AMAK/input/coordinates.txt")
coordinates_AMAK <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/input/coordinates.txt")
coordinates_DATR <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/input/coordinates.txt")
coordinates_AMAK <- read.table("/Users/jimmy.odonnell/Downloads/geneland_AMAK/input/coordinates.txt")
coordinates_AMAK
coordinates_AMAK <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/input/coordinates.txt")
mcmc_dir_AMAK <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/AMAK_eparses/geneland_AMAK/geneland_out/1/"
mcmc_dir_DATR <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/geneland_out/"
par(mfcol=c(1,2))#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir#
)#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
par(mfcol=c(1,2))#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)
coordinates_DATR <- read.table("/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/input/coordinates.txt")
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
mcmc_dir_DATR <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/output_2015-10-14_130412/"
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)
mcmc_dir_DATR <- "/Users/threeprime/Dropbox/Eparses_Connectivity/Analysis/DATR_eparses/geneland_DATR/output_2015-10-21_123923/"
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
pdf(file = "geneland_both_species.pdf", width = 10, height = 5)#
# Set up plot for two plots#
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
dev.off()
postscript(file = "geneland_both_species.ps", width = 10, height = 5)
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
#
dev.off()
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
title(main = "Amphiprion akallopisos")
title(main = italic("Amphiprion akallopisos"))
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
title(main = italic("Amphiprion akallopisos"))
title(main = italics("Amphiprion akallopisos"))
par(mfcol=c(1,2))
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = "Amphiprion akallopisos"#
)
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = italics("Amphiprion akallopisos")#
)
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = italic("Amphiprion akallopisos")#
)
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = expression(italic("Amphiprion akallopisos"))#
)
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = expression(italic("Amphiprion akallopisos"))#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
title(main = italics("Amphiprion akallopisos"))#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR, #
	main.title = expression(italic("Amphiprion akallopisos"))#
#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = expression(italic("Amphiprion akallopisos"))#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
title(main = italics("Amphiprion akallopisos"))#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR, #
	main.title = expression(italic("Dascyllus trimaculatus"))#
#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
#
dev.off()
par(mfcol=c(1,2))#
#
# plot the first species#
plot_geneland(#
	coordinates = coordinates_AMAK, #
	path.mcmc = mcmc_dir_AMAK, #
	main.title = expression(italic("Amphiprion akallopisos"))#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)#
title(main = italics("Amphiprion akallopisos"))#
#
# plot the second species#
plot_geneland(#
	coordinates = coordinates_DATR, #
	path.mcmc = mcmc_dir_DATR, #
	main.title = expression(italic("Dascyllus trimaculatus"))#
#
)#
#
# overlay the map#
map(#
	database ='world2Hires', #
	xlim = c(30, 55), #
	ylim = c(-26, -4), #
	fill=TRUE, #
	col="gray", #
	boundary="gray", #
	interior="gray", #
	add=TRUE, #
	mar=c(4,4,0,4)#
	)
library(maps)#
map("state", interior = FALSE)#
map("state", boundary = FALSE, col="gray", add = TRUE)
library(maps)#
map("state", interior = FALSE)#
map("state", boundary = FALSE, col="gray", add = TRUE, fill = 2)
library(maps)
map("state", boundary = FALSE, col="gray", add = TRUE, fill = 2)
library(maps)
map("state", boundary = FALSE, col="gray", add = TRUE, fill = 2)
library(maps)#
map("state", interior = FALSE)#
map("state", boundary = FALSE, col="gray", add = TRUE, fill = 2)
library(maps)
library(maps)#
map("state", interior = TRUE)#
map("state", boundary = FALSE, col="gray", add = TRUE, fill = 2)
dat
dat <- read.csv("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/PS_urban_eDNA/Data/Analysis_20151125_1623/all_lib/OTUs_swarm/OTUs_BayesianVetted_decontam_rarefied.csv")
rowSums(dat)
dat[1:5,1:5]
dat <- read.csv("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/PS_urban_eDNA/Data/Analysis_20151125_1623/all_lib/OTUs_swarm/OTUs_BayesianVetted_decontam_rarefied.csv", row.names = 1)
dat[1:5,1:5]
rowSums(dat)
plot(rowSums(dat))
plot(sort(rowSums(dat)))
plot(sort(rowSums(dat), decreasing = TRUE))
which( sort(rowSums(dat), decreasing = TRUE) == 0)
which( sort(rowSums(dat), decreasing = TRUE) )
sort(rowSums(dat), decreasing = TRUE)
plot(log(sort(rowSums(dat), decreasing = TRUE)))
abline(h = 0)
abline(h = 1)
abline(h = 3, log = y)
abline(h = 3, log = "y")
plot(log(sort(rowSums(dat), decreasing = TRUE)))
plot(sort(rowSums(dat), decreasing = TRUE), log = "y")
plot(sort(rowSums(dat), decreasing = TRUE))
plot(sort(rowSums(dat), decreasing = TRUE), log = "y")
log(0)
log(1)
length(which(rowSums(dat) == 0))
table(rowSums(dat))
hist(rowSums(dat))
?hist
hist(rowSums(dat), breaks = 50)
hist(rowSums(dat), breaks = 100)
hist(rowSums(dat), breaks = 1000)
table(rowSums(dat))
hist(rowSums(dat), breaks = c(0, 10, 100, 1000, 10000))
hist(rowSums(dat), breaks = c(0, 10, 100, 1000, 10000, max(rowSums(dat))))
hist(rowSums(dat), breaks = c(0, 10, max(rowSums(dat))))
table(rowSums(dat))
plot(table(rowSums(dat)))
plot(log(table(rowSums(dat))))
plot(table(rowSums(dat)), log = "x")
plot(sort(rowSums(dat), decreasing = TRUE))
plot(sort(rowSums(dat), decreasing = TRUE), log = "y")
plot(sort(rowSums(dat), decreasing = TRUE))
plot(sort(rowSums(dat), decreasing = TRUE), log = "y")
plot(sort(rowSums(dat), decreasing = TRUE), log = "y", ylab = "sum of reads across samples")
plot(sort(rowSums(dat), decreasing = TRUE), log = "y", ylab = "log(total reads across samples)")
text(nrow(data), max(rowSums(dat)), "stuff")
max(rowSums(dat))
nrow(data)
nrow(dat)
text(nrow(dat), max(rowSums(dat)), "stuff")
abline(h = 1)
abline(h = 10, lty = "2")
abline(h = 10, lty = 2)
plot(table(rowSums(dat)), log = "x")
plot(sort(rowSums(dat), decreasing = TRUE))
abline(h = 10, lty = 2)
plot(#
	sort(rowSums(dat), decreasing = TRUE), #
	log = "y", #
	ylab = "log(total reads across samples)"#
	xlab = "OTU index"#
	)#
abline(h = 10, lty = 2)
plot(
sort(rowSums(dat), decreasing = TRUE), #
	log = "y", #
	ylab = "log(total reads across samples)", #
	xlab = "OTU index"#
	)
abline(h = 10, lty = 2)
text(nrow(dat), 11, "10")
text(nrow(dat), 12, "10")
text(nrow(dat), 13, "10")
plot(#
	sort(rowSums(dat), decreasing = TRUE), #
	log = "y", #
	ylab = "log(total reads across samples)", #
	xlab = "OTU index"#
	)#
abline(h = 10, lty = 2)#
#
text(nrow(dat), 13, "10")
length(which(rowSums(dat) == 0))
length(which(rowSums(dat) > 10))
length(which(rowSums(dat) > 10))/nrow(dat)
nrow(dat)
1812 -138
length(which(rowSums(dat) == 0))
no_counts <- length(which(rowSums(dat) == 0))
text(nrow(dat), max(rowSums(dat)), paste(no_counts, "reads had no counts"))
text(nrow(dat), max(rowSums(dat)), paste(no_counts, "reads had no counts"), pos = 2)
plot(#
	sort(rowSums(dat), decreasing = TRUE), #
	log = "y", #
	ylab = "log(total reads across samples)", #
	xlab = "OTU index"#
	)#
abline(h = 10, lty = 2)#
#
text(nrow(dat), 13, "10")#
# how many have no counts?#
no_counts <- length(which(rowSums(dat) == 0))#
text(nrow(dat), max(rowSums(dat)), paste(no_counts, "reads had no counts"), pos = 2)
length(which(rowSums(dat) > 10))/nrow(dat)
# another way of looking at data#
plot(table(rowSums(dat)), log = "x")
9*8
10*8
80+72
blast_results <- read.table("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/Lemonade/Data/blast_20151125_1530/blast_results_all.txt")
blast_results <- read.table("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/Lemonade/Data/blast_20151125_1530/blast_results_all.txt", sep = "\t")
head(blast_results)
blast_results <- read.table("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/Lemonade/Data/blast_20151125_1530/blast_results_all.txt", sep = "\t")#
#
# table order: output_format="6 qseqid sallseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore stitle"#
#
evalue_col=11#
bitscore_col=12#
plot(#
	x = blast_results[, evalue_col], #
	y = blast_results[, bitscore_col], #
	xlab = "evalue", #
	ylab = "bitscore"#
	)
plot(#
	x = blast_results[, evalue_col], #
	y = blast_results[, bitscore_col], #
	xlab = "evalue", #
	ylab = "bitscore", #
	log = "x"#
	)
blast_results <- read.table("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/Lemonade/Data/blast_20151125_1530/blast_results_all.txt", sep = "\t")#
#
# table order: output_format="6 qseqid sallseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore stitle"#
#
evalue_col=11#
bitscore_col=12#
plot(#
	x = blast_results[, evalue_col], #
	y = blast_results[, bitscore_col], #
	# log = "x", #
	xlab = "evalue", #
	ylab = "bitscore", #
	)
unique(blast_results[ , query_col ])
blast_results <- read.table("/Users/threeprime/Documents/GoogleDrive/Kelly_Lab/Projects/Lemonade/Data/blast_20151125_1530/blast_results_all.txt", sep = "\t")#
#
# table order: output_format="6 qseqid sallseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore stitle"#
#
query_col=1#
evalue_col=11#
bitscore_col=12#
tax_col=13#
#
plot(#
	x = blast_results[, evalue_col], #
	y = blast_results[, bitscore_col], #
	# log = "x", #
	xlab = "evalue", #
	ylab = "bitscore", #
	)#
dev.off()#
#
unique(blast_results[ , query_col ])#
#
# blast_results[ , ]
query_seq <- unique(blast_results[ , query_col ])
blast_results[ , query_col ] == query_seq[1]
blast_results[
blast_results[ , query_col ] == query_seq[1]
, ]
blast_results[ #
blast_results[ , query_col ] == query_seq[1]#
, bitscore_col]
query_seq <- unique(blast_results[ , query_col ])#
#
blast_results[ #
	blast_results[ , query_col ] == query_seq[1], #
	bitscore_col#
	]
mylist <- list(#
  x = c(1, 4, 6, 7, 9, 5, 4, 3, 3), #
  y = c(4, 66, 5, 8, 3, 6, 5), #
  z = c(4, 8, 6, 9, 55, 78, 3, 2, 2, 0, 0, 0)#
)#
intersect2 <- function(...) {#
  args <- list(...)#
  nargs <- length(args)#
  if(nargs <= 1) {#
    if(nargs == 1 && is.list(args[[1]])) {#
      do.call("intersect2", args[[1]])#
    } else {#
      stop("cannot evaluate intersection fewer than 2 arguments")#
    }#
  } else if(nargs == 2) {#
    intersect(args[[1]], args[[2]])#
  } else {#
    intersect(args[[1]], intersect2(args[-1]))#
  }#
}#
intersect2(mylist)
Reduce(intersect(mylist))
Reduce(intersect, mylist)
df1 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[1:5]) # letters a to e#
df2 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[3:7]) # letters c to g#
df3 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[c(1,2,3,5,7)]) # letters a, b, c, e, and g#
#
dfList <- list(df1, df2, df3)
dfList
df1 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[1:5]) # letters a to e#
df2 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[3:7]) # letters c to g#
df3 <- data.frame(a = 1:5, b = 1:5, #
                  row.names = letters[c(1,2,3,5,7)]) # letters a, b, c, e, and g#
#
dfList <- list(df1, df2, df3)#
#
idx <- Reduce(intersect, lapply(dfList, rownames))#
#
#Extract data:#
df1[idx, ]#
#
# If you want to keep the corresponding rows from all data frames, you could replace the last step, df1[idx, ], with the following command:#
do.call(rbind, lapply(dfList, "[", idx, ))
dfList
idx
library(plyr)
join(df1, df2,
type = "inner")
rbeta
?rbeta
x <- seq(0, 1, length = 21)#
dbeta(x, 1, 1)#
pbeta(x, 1, 1)#
#
## Visualization, including limit cases:#
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {#
  if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {#
    eps <- 1e-10#
    x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)#
  } else {#
    x <- seq(0, 1, length = 1025)#
  }#
  fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))#
  f <- fx; f[fx == Inf] <- 1e100#
  matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,#
          main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))#
  abline(0,1,     col="gray", lty=3)#
  abline(h = 0:1, col="gray", lty=3)#
  legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),#
         col=1:3, lty=1:3, bty = "n")#
  invisible(cbind(x, fx))#
}#
pl.beta(3,1)
pl.beta(2, 4)
pl.beta(3, 7)
pl.beta(3, 7, asp=1)
pl.beta(0, 0)   ## point masses at  {0, 1}
pl.beta(0, 2)   ## point mass at 0 ; the same as
pl.beta(3,1)
setwd("/Users/threeprime/Documents/Dropbox/NIMBioS END/extinctions/Analysis") #Jimmy
setwd("/Users/threeprime/Dropbox/NIMBioS_END/extinctions/Analysis") #Jimmy
data_dir <- file.path("..", "Data")#
#
source("coextDeg_beta.R")#
source("coextNumber_beta.R")#
source("netcascade.R")
source("functions/coextDeg_beta.R")
source("functions/coextNumber_beta.R")
source("functions/netcascade.R")
par(mfrow=c(3,2), mar=c(1,1,1,1))#
hist(rbeta(1000,0.1,1), main="") #to check beta dist#
hist(rbeta(1000,0.5,1),main="") #to check beta dist#
hist(rbeta(1000,1,1),main="") #to check beta dist#
hist(rbeta(1000,3,3),main="") #to check beta dist#
hist(rbeta(1000,4,0.1),main="") #to check beta dist
beta.par<-matrix(c(0.1,0.5,1,3,4,1,1,1,3,0.1),ncol=2)#
rownames(beta.par)=c("exp","power","unif","normal","left")
# path to directory containing empirical networks:#
emp_net_path <- file.path(data_dir, "nets_emp")
nam<-dir(path = emp_net_path) #Plant-pollinator weighted nets
list.net.deg<-list()#
list.net.numb<-list()
nam
emp_nets<-dir(path = emp_net_path) #Plant-pollinator weighted nets
list.net.deg<-list()#
list.net.numb<-list()
emp_nets
mat_empirical <- list()#
#
for(p in 1:length(emp_nets)){#
	mat_empirical[[p]] <- as.matrix(read.table(emp_nets[p]))#
}
emp_net_path <- file.path(data_dir, "nets_emp")
emp_net_path
emp_nets
for(p in 1:length(emp_nets)){#
	mat_empirical[[p]] <- as.matrix(read.table(file.path(emp_net_path, emp_nets[p])))#
}
mat_empirical
sapply(lapply(mat_empirical, rowSums), min)
length(mat_empirical)
sapply(lapply(mat_empirical, rowSums), min)
length(mat_empirical)
mat <- mat_empirical[[p]]
rm(mat)
p
mat <- mat_empirical[[p]]
if(min(c(rowSums(mat), colSums(mat))) == 0){
stop("Hey, you have a species in your network that does not interact with any other species. The following functions will get stuck.")}
m<-nrow(mat)
n<-ncol(mat)
list.deg<-list()
list.numb<-list()
beta.par
for(p in 1:length(mat_empirical)){#
#
  mat <- mat_empirical[[p]]#
#
  if(min(c(rowSums(mat), colSums(mat))) == 0){#
    stop("Hey, you have a species in your network that does not interact with any other species. The following functions will get stuck.")}#
  m<-nrow(mat)#
  n<-ncol(mat)#
#
  list.deg<-list()#
  list.numb<-list()#
  for(k in 1:nrow(beta.par)){#
    #storing results for each parameter combination#
    list.deg[[k]] <- coextDeg_beta(imatrix = mat, nsims = 1000, beta_par1_T1 = beta.par[k,1], beta_par2_T1 = beta.par[k,2],beta_par1_T2 = beta.par[k,1], beta_par2_T2 = beta.par[k,2])#
    list.numb[[k]] <- coextNumber_beta(imatrix = mat, nsims = 1000, beta_par1_T1 = beta.par[k,1], beta_par2_T1 = beta.par[k,2],beta_par1_T2 = beta.par[k,1], beta_par2_T2 = beta.par[k,2])#
  }#
  #storing results for each net#
  list.net.deg[[p]]<-list.deg #
  list.net.numb[[p]]<-list.numb#
}#
#
#------------------#
#Plotting results#
#------------------#
#
q=8#choose net#
Temp.deg<-list.net.deg[[q]]#
Temp.numb<-list.net.numb[[q]]#
Temp.numb=lapply(Temp.numb,log)#
#
par(mfrow = c(2,1), mar=c(3,4,2,2))#
boxplot(Temp.deg[[1]],Temp.deg[[2]],Temp.deg[[3]],Temp.deg[[4]],Temp.deg[[5]], main="Degree", col="darkgray")#
boxplot(Temp.numb[[1]],Temp.numb[[2]],Temp.numb[[3]],Temp.numb[[4]],Temp.numb[[5]],main="Number",col="darkgray")#
axis(1, at=1:5, label=rownames(beta.par))
list.net.deg
length(mat_empirical)
list.net.deg
boxplot(Temp.deg[[1]],Temp.deg[[2]],Temp.deg[[3]],Temp.deg[[4]],Temp.deg[[5]], main="Degree", col="darkgray")
Temp.deg<-list.net.deg[[q]]
length(list.net.deg)
length(list.net.numb)
mat <- mat_empirical[[p]]
mat_empirical
mat
p
length(mat_empirical)
m<-nrow(mat)
n<-ncol(mat)
list.deg<-list()#
  list.numb<-list()
list.deg
list.numb
nrow(beta.par)
beta.par
for(k in 1:nrow(beta.par)){
list.deg[[k]] <- coextDeg_beta(imatrix = mat, nsims = 1000, beta_par1_T1 = beta.par[k,1], beta_par2_T1 = beta.par[k,2],beta_par1_T2 = beta.par[k,1], beta_par2_T2 = beta.par[k,2])
list.numb[[k]] <- coextNumber_beta(imatrix = mat, nsims = 1000, beta_par1_T1 = beta.par[k,1], beta_par2_T1 = beta.par[k,2],beta_par1_T2 = beta.par[k,1], beta_par2_T2 = beta.par[k,2])
}
